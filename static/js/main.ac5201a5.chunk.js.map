{"version":3,"sources":["components/TicTacToe/Square.jsx","components/TicTacToe/Board.jsx","components/TicTacToe/GameLog.jsx","components/TicTacToe/Info.jsx","components/TicTacToe/utils/helper.js","components/TicTacToe/Game.jsx","components/TicTacToe/index.jsx","serviceWorker.js","index.js"],"names":["Square","info","value","status","id","onClick","statusClass","className","type","title","Board","squares","handleSquareClick","map","row","i","key","GameLog","history","stepNumber","handleJumpTo","pastLastMove","lastMove","message","Info","isReplaying","handleReplay","handleReset","currentId","findIndex","undoStepNumber","redoStepNumber","length","calculateWinner","output","winner","positions","forEach","a","b","c","d","e","f","initialState","xIsNext","Math","random","autoReplayed","someoneWon","Game","props","state","bind","handleReverseHistory","step","this","nextStep","current","square","x","y","setState","setTimeout","substring","split","index","parseInt","historyChanged","slice","goToID","reversedHistory","reverse","find","every","React","Component","TicTacToe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac5201a5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Square.css';\n\nconst Square = ({ info: { value, status, id }, onClick }) => {\n  let statusClass = 'square';\n  switch (status) {\n    case 2:\n      statusClass += ' winner';\n      break;\n    case 3:\n      statusClass += ' selected';\n      break;\n    default:\n      break;\n  }\n  return (\n    <button\n      className={statusClass}\n      type=\"button\"\n      title={status > 0 ? 'Played Tile' : 'Playable Tile'}\n      onClick={() => onClick(id)}\n    >\n      {value === 'X' ? <i className=\"material-icons\">close</i> : ''}\n      {value === 'O' ? <i className=\"material-icons\">trip_origin</i> : ''}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  info: PropTypes.shape({\n    value: PropTypes.string.isRequired,\n    status: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Square;\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport Square from './Square';\nimport './Board.css';\n\nconst Board = ({ squares, handleSquareClick }) => {\n  return (\n    <div className=\"game-board\">\n      {squares.map((row, i) => (\n        <div className=\"board-row\" key={`row-${i}`}>\n          {row.map(({ value, status, id }) => (\n            <Square\n              key={id}\n              info={{ value, status, id }}\n              onClick={handleSquareClick}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: propTypes.arrayOf(\n    propTypes.arrayOf(\n      propTypes.shape({ value: propTypes.string.isRequired }).isRequired,\n    ).isRequired,\n  ).isRequired,\n  handleSquareClick: propTypes.func.isRequired,\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './GameLog.css';\n\nconst GameLog = ({ history, stepNumber, handleJumpTo }) => (\n  <ol className=\"last-moves\">\n    {history.map(({ id, lastMove: pastLastMove }) => {\n      let message = '';\n      if (id === 'move #0') {\n        if (id === `move #${stepNumber}`) {\n          message = `You are at game start`;\n        } else {\n          message = `Go to game start`;\n        }\n      } else if (id === `move #${stepNumber}`) {\n        message = `Go to last move ${\n          pastLastMove ? `(${pastLastMove[0] + 1}, ${pastLastMove[1] + 1})` : ''\n        }`;\n      } else {\n        message = `Go to ${id} ${\n          pastLastMove ? `(${pastLastMove[0] + 1}, ${pastLastMove[1] + 1})` : ''\n        }`;\n      }\n      return (\n        <li key={id}>\n          <button\n            className=\"last-move-button\"\n            onClick={() => handleJumpTo(id)}\n            type=\"button\"\n            title={message}\n          >\n            {id === `move #${stepNumber}` ? (\n              <strong>{message}</strong>\n            ) : (\n              message\n            )}\n          </button>\n        </li>\n      );\n    })}\n  </ol>\n);\n\nGameLog.propTypes = {\n  history: PropTypes.arrayOf(\n    PropTypes.shape({\n      squares: PropTypes.arrayOf(\n        PropTypes.arrayOf(\n          PropTypes.shape({ value: PropTypes.string.isRequired }).isRequired,\n        ).isRequired,\n      ).isRequired,\n      lastMove: PropTypes.arrayOf(PropTypes.number),\n    }).isRequired,\n  ).isRequired,\n  stepNumber: PropTypes.number.isRequired,\n  handleJumpTo: PropTypes.func.isRequired,\n};\n\nexport default GameLog;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport GameLog from './GameLog';\nimport './Info.css';\n\nconst Info = ({\n  status,\n  history,\n  isReplaying,\n  stepNumber,\n  handleReplay,\n  handleReset,\n  handleJumpTo,\n  // handleReverseHistory,\n}) => {\n  // const [movesOrderIsDescending, setMovesOrderIsDescending] = useState(true);\n\n  const currentId = history.findIndex(({ id }) => id === `move #${stepNumber}`);\n  const undoStepNumber = currentId > 0 ? currentId - 1 : 0;\n  const redoStepNumber =\n    currentId < history.length - 1 ? currentId + 1 : history.length - 1;\n\n  return (\n    <div className=\"game-info\">\n      <div className=\"status\">{status}</div>\n      <div className=\"options-buttons\">\n        <button\n          className=\"option-button\"\n          onClick={isReplaying ? null : handleReplay}\n          type=\"button\"\n          title=\"Replay\"\n        >\n          <i className=\"material-icons\">replay</i>\n        </button>\n        <button\n          className=\"option-button\"\n          onClick={handleReset}\n          type=\"button\"\n          title=\"Reset\"\n        >\n          <i className=\"material-icons\">cached</i>\n        </button>\n      </div>\n      <GameLog\n        history={history}\n        stepNumber={stepNumber}\n        handleJumpTo={id => {\n          handleJumpTo(id);\n        }}\n      />\n      <div className=\"options-buttons\">\n        <button\n          className=\"option-button\"\n          onClick={() => {\n            handleJumpTo(`move #${undoStepNumber}`);\n          }}\n          type=\"button\"\n          title=\"Undo\"\n        >\n          <i className=\"material-icons\">undo</i>\n        </button>\n        {/* <button\n          className=\"option-button\"\n          onClick={() => {\n            setMovesOrderIsDescending(!movesOrderIsDescending);\n            handleReverseHistory();\n          }}\n          type=\"button\"\n          title=\"Change moves order\"\n        >\n          {movesOrderIsDescending ? (\n            <i className=\"material-icons\">arrow_downward</i>\n          ) : (\n            <i className=\"material-icons\">arrow_upward</i>\n          )}\n        </button> */}\n        <button\n          className=\"option-button\"\n          onClick={() => {\n            handleJumpTo(`move #${redoStepNumber}`);\n          }}\n          type=\"button\"\n          title=\"Redo\"\n        >\n          <i className=\"material-icons\">redo</i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nInfo.propTypes = {\n  status: propTypes.string.isRequired,\n  history: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string.isRequired,\n      squares: propTypes.arrayOf(\n        propTypes.arrayOf(\n          propTypes.shape({\n            id: propTypes.string.isRequired,\n            value: propTypes.string.isRequired,\n            status: propTypes.number.isRequired,\n          }).isRequired,\n        ).isRequired,\n      ).isRequired,\n      lastMove: propTypes.arrayOf(propTypes.number),\n    }).isRequired,\n  ).isRequired,\n  isReplaying: propTypes.bool.isRequired,\n  stepNumber: propTypes.number.isRequired,\n  handleReplay: propTypes.func.isRequired,\n  handleReset: propTypes.func.isRequired,\n  handleJumpTo: propTypes.func.isRequired,\n  // handleReverseHistory: propTypes.func.isRequired,\n};\n\nexport default Info;\n","function calculateWinner(squares) {\n  const lines = [\n    [[0, 0], [0, 1], [0, 2]],\n    [[1, 0], [1, 1], [1, 2]],\n    [[2, 0], [2, 1], [2, 2]],\n    [[0, 0], [1, 0], [2, 0]],\n    [[0, 1], [1, 1], [2, 1]],\n    [[0, 2], [1, 2], [2, 2]],\n    [[0, 0], [1, 1], [2, 2]],\n    [[0, 2], [1, 1], [2, 0]],\n  ];\n\n  let output = { winner: '', positions: [] };\n  lines.forEach(([[a, b], [c, d], [e, f]]) => {\n    if (\n      squares[a][b].value &&\n      squares[a][b].value === squares[c][d].value &&\n      squares[a][b].value === squares[e][f].value\n    )\n      output = {\n        winner: squares[a][b].value,\n        positions: [[a, b], [c, d], [e, f]],\n      };\n  });\n  return output;\n}\n\nexport default calculateWinner;\n","import React from 'react';\nimport Board from './Board';\nimport Info from './Info';\nimport calculateWinner from './utils/helper';\nimport './Game.css';\n\nconst initialState = {\n  history: [\n    {\n      id: 'move #0',\n      squares: [\n        [\n          {\n            id: 'square-0-0',\n            value: '',\n            status: 0,\n          },\n          {\n            id: 'square-0-1',\n            value: '',\n            status: 0,\n          },\n          {\n            id: 'square-0-2',\n            value: '',\n            status: 0,\n          },\n        ],\n        [\n          {\n            id: 'square-1-0',\n            value: '',\n            status: 0,\n          },\n          {\n            id: 'square-1-1',\n            value: '',\n            status: 0,\n          },\n          {\n            id: 'square-1-2',\n            value: '',\n            status: 0,\n          },\n        ],\n        [\n          {\n            id: 'square-2-0',\n            value: '',\n            status: 0,\n          },\n          {\n            id: 'square-2-1',\n            value: '',\n            status: 0,\n          },\n          {\n            id: 'square-2-2',\n            value: '',\n            status: 0,\n          },\n        ],\n      ],\n      lastMove: [],\n    },\n  ],\n  xIsNext: Math.random() < 0.5,\n  stepNumber: 0,\n  isReplaying: false,\n  autoReplayed: false,\n  someoneWon: '',\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.handleReplay = this.handleReplay.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleJumpTo = this.handleJumpTo.bind(this);\n    this.handleReverseHistory = this.handleReverseHistory.bind(this);\n  }\n\n  /*\n    @param  {string}  recursion  Square id ej: square-0-0.\n  */\n  handleReplay(step = 0) {\n    const { history } = this.state;\n    const nextStep = step + 1;\n    if (nextStep === history.length) {\n      const current = history[history.length - 1];\n      const squares = [\n        ...current.squares.map(row => row.map(square => ({ ...square }))),\n      ];\n      const { winner: someoneWon, positions } = calculateWinner(squares);\n      positions.forEach(([x, y]) => {\n        history[history.length - 1].squares[x][y].status = 2;\n      });\n      this.setState({\n        stepNumber: step,\n        xIsNext: step % 2 === 0,\n        isReplaying: false,\n        autoReplayed: true,\n        someoneWon,\n      });\n    } else {\n      this.setState(\n        {\n          stepNumber: step,\n          xIsNext: step % 2 === 0,\n          isReplaying: true,\n          someoneWon: '',\n        },\n        () => {\n          if (nextStep < history.length) {\n            setTimeout(() => {\n              this.handleReplay(nextStep);\n            }, 500);\n          }\n        },\n      );\n    }\n  }\n\n  handleReset() {\n    this.setState(initialState);\n  }\n\n  /*\n    @param  {string}  id  Square id ej: square-0-0.\n  */\n  handleSquareClick(id) {\n    const {\n      xIsNext,\n      isReplaying,\n      stepNumber,\n      history,\n      someoneWon,\n    } = this.state;\n\n    if (isReplaying) return;\n\n    const [a, b] = id\n      .substring(id.length - 3)\n      .split('-')\n      .map(index => parseInt(index, 10));\n    const historyChanged = history.slice(0, stepNumber + 1);\n    const current = historyChanged[historyChanged.length - 1];\n    const squares = [\n      ...current.squares.map(row => row.map(square => ({ ...square }))),\n    ];\n\n    if (\n      (someoneWon && stepNumber === history.length - 1) ||\n      squares[a][b].value !== ''\n    )\n      return;\n\n    squares[a][b].value = xIsNext ? 'X' : 'O';\n    squares[a][b].status = 1;\n    const { winner, positions } = calculateWinner(squares);\n    positions.forEach(([x, y]) => {\n      squares[x][y].status = 2;\n    });\n\n    this.setState({\n      history: [\n        ...historyChanged,\n        { id: `move #${stepNumber + 1}`, squares, lastMove: [a, b] },\n      ],\n      xIsNext: !xIsNext,\n      stepNumber: historyChanged.length,\n      someoneWon: winner,\n    });\n  }\n\n  /*\n    @param  {string}  goToID  Last move coordinates.  ej: move #0-0.\n  */\n  handleJumpTo(goToID) {\n    const { history, isReplaying } = this.state;\n\n    if (isReplaying) return;\n    const step = history.findIndex(({ id }) => id === goToID);\n    const { squares, lastMove } = history[step];\n    if (lastMove.length > 0) {\n      const [a, b] = lastMove;\n      squares[a][b].status = 3;\n\n      this.setState({\n        history: [\n          ...history.slice(0, step),\n          {\n            id: `move #${step}`,\n            squares: [\n              ...squares.map(row => row.map(square => ({ ...square }))),\n            ],\n            lastMove,\n          },\n          ...history.slice(step + 1),\n        ],\n        stepNumber: step,\n        xIsNext: step % 2 === 0,\n      });\n    } else {\n      this.setState({\n        stepNumber: step,\n        xIsNext: step % 2 === 0,\n      });\n    }\n  }\n\n  handleReverseHistory() {\n    const { history } = this.state;\n    const reversedHistory = [...history].reverse();\n\n    this.setState({\n      history: reversedHistory,\n    });\n  }\n\n  render() {\n    const {\n      history,\n      xIsNext,\n      isReplaying,\n      stepNumber,\n      autoReplayed,\n      someoneWon,\n    } = this.state;\n\n    const current = history.find(({ id }) => id === `move #${stepNumber}`);\n    const squares = [...current.squares];\n\n    let status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n    if (someoneWon !== '') {\n      status = `The Winner is: ${someoneWon}`;\n      if (!autoReplayed) setTimeout(() => this.handleReplay(), 1000);\n    } else if (squares.every(row => row.every(({ value }) => value)))\n      status = 'Draw!';\n\n    return (\n      <div className=\"game\">\n        <Board\n          squares={squares}\n          handleSquareClick={id => this.handleSquareClick(id)}\n        />\n        <Info\n          status={status}\n          isReplaying={isReplaying}\n          squares={squares}\n          history={history}\n          stepNumber={stepNumber}\n          handleReplay={() => this.handleReplay()}\n          handleReset={() => this.handleReset()}\n          handleJumpTo={(step, lastMove) => this.handleJumpTo(step, lastMove)}\n          handleReverseHistory={() => {\n            this.handleReverseHistory();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport './index.css';\n\nconst TicTacToe = () => {\n  return <Game />;\n};\n\nexport default TicTacToe;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TicTacToe from './components/TicTacToe';\nimport { unregister } from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById('app'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}